{
  "name": "Expense Automation with NLP Queries",
  "nodes": [
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "message",
        "operation": "getAll",
        "returnAll": false,
        "limit": 10,
        "simple": false,
        "additionalFields": {
          "format": "full"
        }
      },
      "id": "gmail-trigger",
      "name": "Gmail Trigger",
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "whatsapp-webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "whatsapp-webhook",
      "name": "WhatsApp Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 500],
      "webhookId": "whatsapp-nlp-webhook"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "is-whatsapp-query",
              "leftValue": "={{ $json.body && $json.body.message && $json.body.message.text }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "whatsapp-query-filter",
      "name": "WhatsApp Query Filter",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [460, 500]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "prompts/nlp_query",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "get-nlp-prompt",
      "name": "Get NLP Query Prompt",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [680, 500],
      "webhookId": "nlp-prompt-webhook"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.openrouterApiKey }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "HTTP-Referer",
              "value": "https://n8n.io"
            },
            {
              "name": "X-Title",
              "value": "Expense Management System"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "openai/gpt-4"
            },
            {
              "name": "messages",
              "value": "=[\n  {\n    \"role\": \"system\",\n    \"content\": \"{{ $('Get NLP Query Prompt').first().json.content }}\"\n  },\n  {\n    \"role\": \"user\",\n    \"content\": \"{{ $('WhatsApp Webhook').first().json.body.message.text }}\"\n  }\n]"
            },
            {
              "name": "temperature",
              "value": 0.1
            },
            {
              "name": "max_tokens",
              "value": 1000
            }
          ]
        },
        "options": {}
      },
      "id": "nlp-query-ai",
      "name": "NLP Query AI",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 500]
    },
    {
      "parameters": {
        "jsCode": "// Parse AI response for SQL query generation\nconst response = $('NLP Query AI').first().json;\n\nlet queryData;\ntry {\n  // Try to parse the content as JSON\n  const content = response.choices[0].message.content;\n  queryData = JSON.parse(content);\n} catch (error) {\n  // Fallback if JSON parsing fails\n  queryData = {\n    query_type: 'error',\n    sql_query: null,\n    explanation: 'Failed to parse AI response',\n    error: error.message\n  };\n}\n\n// Add metadata\nqueryData.user_query = $('WhatsApp Webhook').first().json.body.message.text;\nqueryData.model_used = response.model || 'unknown';\nqueryData.timestamp = new Date().toISOString();\n\nreturn queryData;"
      },
      "id": "parse-nlp-response",
      "name": "Parse NLP Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 500]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-sql-query",
              "leftValue": "={{ $json.sql_query }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "sql-query-check",
      "name": "SQL Query Check",
      "typeVersion": 2,
      "position": [1340, 500]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "={{ $json.sql_query }}",
        "options": {}
      },
      "id": "execute-sql-query",
      "name": "Execute SQL Query",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1560, 500]
    },
    {
      "parameters": {
        "jsCode": "// Format database results for WhatsApp response\nconst queryData = $('Parse NLP Response').first().json;\nconst dbResults = $('Execute SQL Query').first().json;\n\nlet responseText = '';\n\nif (queryData.query_type === 'summary') {\n  // Format summary data\n  if (dbResults && dbResults.length > 0) {\n    const result = dbResults[0];\n    responseText = `üìä ${queryData.explanation}\\n\\n`;\n    \n    if (result.total_amount) {\n      responseText += `üí∞ Total Amount: ‚Çπ${result.total_amount.toLocaleString()}\\n`;\n    }\n    if (result.transaction_count) {\n      responseText += `üìù Transactions: ${result.transaction_count}\\n`;\n    }\n    if (result.average_amount) {\n      responseText += `üìà Average: ‚Çπ${result.average_amount.toLocaleString()}\\n`;\n    }\n  } else {\n    responseText = `‚ùå No data found for your query: \"${queryData.user_query}\"`;\n  }\n} else if (queryData.query_type === 'list') {\n  // Format list data\n  if (dbResults && dbResults.length > 0) {\n    responseText = `üìã ${queryData.explanation}\\n\\n`;\n    \n    dbResults.slice(0, 10).forEach((item, index) => {\n      responseText += `${index + 1}. ${item.merchant || item.category} - ‚Çπ${item.amount?.toLocaleString() || 'N/A'}\\n`;\n      if (item.transaction_date) {\n        responseText += `   üìÖ ${item.transaction_date}\\n`;\n      }\n      responseText += '\\n';\n    });\n    \n    if (dbResults.length > 10) {\n      responseText += `... and ${dbResults.length - 10} more transactions`;\n    }\n  } else {\n    responseText = `‚ùå No transactions found for your query: \"${queryData.user_query}\"`;\n  }\n} else if (queryData.query_type === 'trends') {\n  // Format trends data\n  if (dbResults && dbResults.length > 0) {\n    responseText = `üìà ${queryData.explanation}\\n\\n`;\n    \n    dbResults.forEach(item => {\n      responseText += `üìä ${item.category || item.month}: ‚Çπ${item.total_amount?.toLocaleString() || 'N/A'}\\n`;\n    });\n  } else {\n    responseText = `‚ùå No trend data found for your query: \"${queryData.user_query}\"`;\n  }\n} else {\n  responseText = `‚ùå Sorry, I couldn't understand your query: \"${queryData.user_query}\"\\n\\nTry asking:\\n‚Ä¢ \"How much did I spend in January?\"\\n‚Ä¢ \"Show me travel expenses\"\\n‚Ä¢ \"What are my spending trends?\"`;\n}\n\nreturn {\n  response_text: responseText,\n  query_type: queryData.query_type,\n  user_query: queryData.user_query,\n  results_count: dbResults ? dbResults.length : 0\n};"
      },
      "id": "format-whatsapp-response",
      "name": "Format WhatsApp Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"success\",\n  \"message\": $json.response_text,\n  \"data\": {\n    \"query_type\": $json.query_type,\n    \"user_query\": $json.user_query,\n    \"results_count\": $json.results_count\n  }\n}",
        "options": {}
      },
      "id": "whatsapp-response",
      "name": "WhatsApp Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2000, 500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"error\",\n  \"message\": \"Sorry, I couldn't generate a proper query for your question.\",\n  \"data\": {\n    \"user_query\": $('WhatsApp Webhook').first().json.body.message.text,\n    \"error\": $json.explanation || 'Unknown error'\n  }\n}",
        "options": {}
      },
      "id": "nlp-error-response",
      "name": "NLP Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1560, 600]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": "public",
        "table": "nlp_query_logs",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "user_id": "={{ $('WhatsApp Webhook').first().json.body.message.from || '00000000-0000-0000-0000-000000000000' }}",
            "query_text": "={{ $('WhatsApp Webhook').first().json.body.message.text }}",
            "query_type": "={{ $json.query_type || 'unknown' }}",
            "response_data": "={{ JSON.stringify($json) }}",
            "processing_time_ms": "={{ Date.now() - new Date($('WhatsApp Webhook').first().json.body.message.timestamp).getTime() }}"
          }
        },
        "options": {}
      },
      "id": "log-nlp-query",
      "name": "Log NLP Query",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [2220, 500]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "prompts/transaction_detection",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "get-transaction-prompt",
      "name": "Get Transaction Detection Prompt",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [460, 200],
      "webhookId": "transaction-prompt-webhook"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "prompt-available",
              "leftValue": "={{ $json.content }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "prompt-check",
      "name": "Check Prompt Available",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 200]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.openrouterApiKey }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "HTTP-Referer",
              "value": "https://n8n.io"
            },
            {
              "name": "X-Title",
              "value": "Expense Management System"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "openai/gpt-4"
            },
            {
              "name": "messages",
              "value": "=[\n  {\n    \"role\": \"system\",\n    \"content\": \"{{ $('Get Transaction Detection Prompt').first().json.content }}\"\n  },\n  {\n    \"role\": \"user\",\n    \"content\": \"Please analyze this email to determine if it contains a financial transaction:\\n\\nEmail Subject: {{ $('Gmail Trigger').first().json.subject }}\\nEmail Sender: {{ $('Gmail Trigger').first().json.from }}\\nEmail Content: {{ $('Gmail Trigger').first().json.textPlain || $('Gmail Trigger').first().json.textHtml }}\\n\\nReturn only a JSON response with the following structure:\\n{\\n  \\\"is_transaction\\\": true/false,\\n  \\\"confidence\\\": 0.0-1.0,\\n  \\\"reasoning\\\": \\\"brief explanation\\\",\\n  \\\"transaction_type\\\": \\\"type if detected\\\"\\n}\"\n  }\n]"
            },
            {
              "name": "temperature",
              "value": 0.1
            },
            {
              "name": "max_tokens",
              "value": 500
            }
          ]
        },
        "options": {}
      },
      "id": "transaction-detection-ai",
      "name": "AI Transaction Detection",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 200]
    },
    {
      "parameters": {
        "jsCode": "// Parse AI response for transaction detection\nconst response = $('AI Transaction Detection').first().json;\n\nlet detectionResult;\ntry {\n  // Try to parse the content as JSON\n  const content = response.choices[0].message.content;\n  detectionResult = JSON.parse(content);\n} catch (error) {\n  // Fallback if JSON parsing fails\n  detectionResult = {\n    is_transaction: false,\n    confidence: 0.0,\n    reasoning: 'Failed to parse AI response',\n    transaction_type: 'unknown'\n  };\n}\n\n// Add email metadata\ndetectionResult.email_subject = $('Gmail Trigger').first().json.subject;\ndetectionResult.email_sender = $('Gmail Trigger').first().json.from;\ndetectionResult.email_date = $('Gmail Trigger').first().json.date;\ndetectionResult.model_used = response.model || 'unknown';\n\ndetectionResult.is_transaction = Boolean(detectionResult.is_transaction);\ndetectionResult.confidence = parseFloat(detectionResult.confidence) || 0.0;\n\nreturn detectionResult;"
      },
      "id": "parse-detection-result",
      "name": "Parse Detection Result",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "is-transaction",
              "leftValue": "={{ $json.is_transaction }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            },
            {
              "id": "confidence-threshold",
              "leftValue": "={{ $json.confidence }}",
              "rightValue": 0.5,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "transaction-filter",
      "name": "Transaction Filter",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1340, 200]
    },
    {
      "parameters": {
        "httpMethod": "GET",
        "path": "prompts/indian_expense_extraction",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "get-expense-prompt",
      "name": "Get Expense Extraction Prompt",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1560, 100],
      "webhookId": "expense-prompt-webhook"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.openrouterApiKey }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "HTTP-Referer",
              "value": "https://n8n.io"
            },
            {
              "name": "X-Title",
              "value": "Expense Management System"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "openai/gpt-4"
            },
            {
              "name": "messages",
              "value": "=[\n  {\n    \"role\": \"system\",\n    \"content\": \"{{ $('Get Expense Extraction Prompt').first().json.content }}\"\n  },\n  {\n    \"role\": \"user\",\n    \"content\": \"Please extract expense information from this Indian email:\\n\\nEmail Subject: {{ $('Gmail Trigger').first().json.subject }}\\nEmail Sender: {{ $('Gmail Trigger').first().json.from }}\\nEmail Content: {{ $('Gmail Trigger').first().json.textPlain || $('Gmail Trigger').first().json.textHtml }}\\n\\nFollow the comprehensive guidelines provided in the system prompt to extract all financial information.\\nPay special attention to:\\n- Indian currency patterns (‚Çπ, Rs, INR)\\n- Indian payment methods (UPI, cards, net banking)\\n- GST information\\n- Indian merchant names\\n- Multiple transactions if present\\n- Refunds vs expenses\\n\\nReturn the extracted information in the specified JSON format.\"\n  }\n]"
            },
            {
              "name": "temperature",
              "value": 0.1
            },
            {
              "name": "max_tokens",
              "value": 1000
            }
          ]
        },
        "options": {}
      },
      "id": "expense-extraction-ai",
      "name": "AI Expense Extraction",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1780, 100]
    },
    {
      "parameters": {
        "jsCode": "// Parse AI response for expense extraction\nconst response = $('AI Expense Extraction').first().json;\n\nlet expenseData;\ntry {\n  // Try to parse the content as JSON\n  const content = response.choices[0].message.content;\n  expenseData = JSON.parse(content);\n} catch (error) {\n  // Fallback if JSON parsing fails\n  expenseData = {\n    amount: 0,\n    currency: 'INR',\n    description: 'Failed to parse expense data',\n    category: 'other',\n    merchant: 'unknown',\n    confidence_score: 0.0,\n    is_transaction: false\n  };\n}\n\n// Add metadata\nexpenseData.email_subject = $('Gmail Trigger').first().json.subject;\nexpenseData.email_sender = $('Gmail Trigger').first().json.from;\nexpenseData.email_date = $('Gmail Trigger').first().json.date;\nexpenseData.model_used = response.model || 'unknown';\nexpenseData.detection_confidence = $('Parse Detection Result').first().json.confidence;\n\nexpenseData.amount = parseFloat(expenseData.amount) || 0;\nexpenseData.confidence_score = parseFloat(expenseData.confidence_score) || 0.0;\nexpenseData.is_transaction = Boolean(expenseData.is_transaction);\n\nreturn expenseData;"
      },
      "id": "parse-expense-data",
      "name": "Parse Expense Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2000, 100]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": "public",
        "table": "expenses",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "user_id": "={{ $('Gmail Trigger').first().json.user_id || '00000000-0000-0000-0000-000000000000' }}",
            "amount": "={{ $json.amount }}",
            "currency": "={{ $json.currency || 'INR' }}",
            "description": "={{ $json.description }}",
            "category": "={{ $json.category || 'other' }}",
            "merchant": "={{ $json.merchant || 'Unknown' }}",
            "transaction_date": "={{ $json.transaction_date || new Date().toISOString().split('T')[0] }}",
            "payment_method": "={{ $json.payment_method || 'other' }}",
            "city": "={{ $json.city || '' }}",
            "state": "={{ $json.state || '' }}",
            "gst_amount": "={{ $json.gst_amount || 0 }}",
            "gst_percentage": "={{ $json.gst_percentage || 0 }}",
            "confidence_score": "={{ $json.confidence_score || 0.0 }}",
            "email_subject": "={{ $json.email_subject }}",
            "email_sender": "={{ $json.email_sender }}",
            "email_source": "={{ $('Gmail Trigger').first().json.messageId }}",
            "raw_email_content": "={{ $('Gmail Trigger').first().json.textPlain || $('Gmail Trigger').first().json.textHtml }}",
            "parsed_data": "={{ JSON.stringify($json) }}"
          }
        },
        "options": {}
      },
      "id": "insert-to-supabase",
      "name": "Insert to Supabase",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [2220, 100]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": "public",
        "table": "email_processing_logs",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "user_id": "={{ $('Gmail Trigger').first().json.user_id || '00000000-0000-0000-0000-000000000000' }}",
            "email_message_id": "={{ $('Gmail Trigger').first().json.messageId }}",
            "email_subject": "={{ $('Gmail Trigger').first().json.subject }}",
            "email_sender": "={{ $('Gmail Trigger').first().json.from }}",
            "processing_status": "completed",
            "llm_response": "={{ JSON.stringify($json) }}",
            "processing_time_ms": "={{ Date.now() - new Date($('Gmail Trigger').first().json.date).getTime() }}",
            "notes": "Successfully processed transaction email"
          }
        },
        "options": {}
      },
      "id": "log-processing",
      "name": "Log Processing",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [2440, 100]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"success\",\n  \"message\": \"Transaction processed successfully\",\n  \"data\": {\n    \"amount\": $json.amount,\n    \"currency\": $json.currency,\n    \"category\": $json.category,\n    \"merchant\": $json.merchant,\n    \"detection_confidence\": $json.detection_confidence,\n    \"extraction_confidence\": $json.confidence_score,\n    \"model_used\": $json.model_used\n  }\n}",
        "options": {}
      },
      "id": "success-response",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2660, 100]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"skipped\",\n  \"message\": \"Not a transaction email\",\n  \"data\": {\n    \"email_subject\": $('Gmail Trigger').first().json.subject,\n    \"detection_confidence\": $('Parse Detection Result').first().json.confidence,\n    \"reasoning\": $('Parse Detection Result').first().json.reasoning\n  }\n}",
        "options": {}
      },
      "id": "not-transaction-response",
      "name": "Not Transaction Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": "public",
        "table": "email_processing_logs",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "user_id": "={{ $('Gmail Trigger').first().json.user_id || '00000000-0000-0000-0000-000000000000' }}",
            "email_message_id": "={{ $('Gmail Trigger').first().json.messageId }}",
            "email_subject": "={{ $('Gmail Trigger').first().json.subject }}",
            "email_sender": "={{ $('Gmail Trigger').first().json.from }}",
            "processing_status": "skipped",
            "llm_response": "={{ JSON.stringify($('Parse Detection Result').first().json) }}",
            "processing_time_ms": "={{ Date.now() - new Date($('Gmail Trigger').first().json.date).getTime() }}",
            "notes": "Email skipped - not a transaction"
          }
        },
        "options": {}
      },
      "id": "log-skipped",
      "name": "Log Skipped",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"error\",\n  \"message\": \"Failed to load prompt\",\n  \"error\": \"Prompt not available\"\n}",
        "options": {}
      },
      "id": "prompt-error-response",
      "name": "Prompt Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [680, 400]
    }
  ],
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Get Transaction Detection Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Transaction Detection Prompt": {
      "main": [
        [
          {
            "node": "Check Prompt Available",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Prompt Available": {
      "main": [
        [
          {
            "node": "AI Transaction Detection",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prompt Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Transaction Detection": {
      "main": [
        [
          {
            "node": "Parse Detection Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Detection Result": {
      "main": [
        [
          {
            "node": "Transaction Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transaction Filter": {
      "main": [
        [
          {
            "node": "Get Expense Extraction Prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Not Transaction Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Expense Extraction Prompt": {
      "main": [
        [
          {
            "node": "AI Expense Extraction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Expense Extraction": {
      "main": [
        [
          {
            "node": "Parse Expense Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Expense Data": {
      "main": [
        [
          {
            "node": "Insert to Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert to Supabase": {
      "main": [
        [
          {
            "node": "Log Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Processing": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Not Transaction Response": {
      "main": [
        [
          {
            "node": "Log Skipped",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WhatsApp Webhook": {
      "main": [
        [
          {
            "node": "WhatsApp Query Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WhatsApp Query Filter": {
      "main": [
        [
          {
            "node": "Get NLP Prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NLP Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get NLP Prompt": {
      "main": [
        [
          {
            "node": "NLP Query AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NLP Query AI": {
      "main": [
        [
          {
            "node": "Parse NLP Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse NLP Response": {
      "main": [
        [
          {
            "node": "SQL Query Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SQL Query Check": {
      "main": [
        [
          {
            "node": "Execute SQL Query",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format WhatsApp Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute SQL Query": {
      "main": [
        [
          {
            "node": "Log NLP Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format WhatsApp Response": {
      "main": [
        [
          {
            "node": "WhatsApp Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WhatsApp Response": {
      "main": [
        [
          {
            "node": "Log NLP Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NLP Error Response": {
      "main": [
        [
          {
            "node": "Log NLP Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log NLP Query": {
      "main": [
        [
          {
            "node": "WhatsApp Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}
